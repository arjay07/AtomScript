#    _____           _              
#   |  __ \         | |             
#   | |__) | __ ___ | |_ ___  _ __  
#   |  ___/ '__/ _ \| __/ _ \| '_ \ 
#   | |   | | | (_) | || (_) | | | |
#   |_|   |_|  \___/ \__\___/|_| |_| v0.2.6.2
#                                   
#	Â©ZeroSeven Interactive 2015   
#	API for AtomScript
# 

@Proton = {};
@Doc = document;
@Window = window;

# Stats
Proton<stats> = {

	currZIndex: 999

};

# List
Proton<list> = $(){
	
	this -> length = 0;
	
	if(arguments::length > 0){
	
		for(@i = 0; i < arguments::length; i++){
	
			this [i] = arguments[i];
			this -> length++;

		}
	
	}
	
	this -> add = $(obj){
	
		@i = this -> length;
		@i2 = i++;
		this [i2] = obj;
		this -> length++;
	
	}
	
	this -> set = $(index, obj){
	
		this [index] = obj;
	
	}
	
	this -> indexOf = $(obj, pos){
	
		pos = 0;
	
		for(@i = 0; i < this -> length; i++){
			
			if(this [pos + i] == obj){
			
				return pos + i;
				break;
			
			}
			
		}
		
		return -1;
		
	}
	
	this -> clear = $(){
	
		for(@i = 0; i < this -> length; i++){
		
			delete this[i];
		
		}
		
		this -> length = 0;
	
	}
	
	this -> toArray = $(array){
	
		@a = [];
	
		for(@i = 0; i < this -> length; i++){
		
			a::push(this[i]);
		
		}
		
		if(array!=null){
		
			array = a;
		
		}
		
		return a;
	
	}

};

# String Builder

Proton<StringBuilder> = $(){

	@string = "";
	
	this -> append = $(chars){
	
		string = string + chars;
	
	};
	
	this -> toString = $(){
	
		return string;
	
	};

}

# Pointer
Proton<Pointer> = {x: 0, y: 0, state: "up"};

Proton<Pointer>update = $(e){

	if(e.pageX || e.pageY){
	
		Proton<Pointer>x = e.pageX;
		Proton<Pointer>y = e.pageY;
	
	}else if(e.clientX || e.clientY){
	
		Proton<Pointer>x = e.clientX + document.documentElement.scrollLeft;
		Proton<Pointer>y = e.clientY + document.documentElement.scrollTop;
	
	}

};

Doc<addEventListener>("mousemove", Proton::Pointer<update>);
Doc<addEventListener>("mousedown", $(){

	Proton<Pointer>state = "down";

});

Doc<addEventListener>("mouseup", $(){

	Proton<Pointer>state = "up";

});

# Runnable
Proton<Runnable> = $(object){

	this -> run = $(){
	
		#console<log>("Hoopla");
		object<run>();
	
	};
	
	this -> waitToRun = $(ms){
	
		@interval = Window::setInterval($(){
		
			object::run();
			Window::clearInterval(interval);
		
		}, ms);
	
	};

};

# Thread

Proton<Thread> = $(runnable){

	this -> start = $(){
	
		@interval = setInterval($(){runnable();});
	
	}

}

# DOM Methods

Proton<style> = $(element, style, value){

	if(value == null){
	
		@styleAttr = "";
		if(element<getAttribute>("style") != null)styleAttr = element<getAttribute>("style");
		element<setAttribute>("style", styleAttr + style);
	
	}else{
	
		element::style[style] = value;
	
	}

};

Proton<CSS> = $(){

	@style = Doc<createElement>("style");
	
	style<appendChild>(Doc<createTextNode>(""));
	
	Doc::head<appendChild>(style);
	
	@sheet = style<sheet>;
	
	sheet<add> = $(selector, rules, index){
	
		if("insertRule" in sheet){
		
			sheet<insertRule>(selector + "{" + rules + "}", index );
		
		}else if("addRule" in sheet){
		
			sheet<addRule>(selector, rules, index);
		
		}
	
	}
	
	return sheet;

};

Proton<get> = $(id, root){
	
	if(root == null)root = document;

	if(id<startsWith>(":")){

		return root<getElementById>(id<substring>(1, id::length));

	}else if(id<startsWith>(".")){

		return root<getElementsByClassName>(id<substring>(1, id::length));

	}else if(id<startsWith>("<") && id.endsWith(">")){ 

		return root<getElementsByTagName>(id<substring>(1, id::length-1));

	}else if(id<startsWith>("^")){

		return root<getElementsByName>(id<substring>(1, id::length));

	}else{

		return id;

	}
	
};

Proton<prepend> = $(element, parent){

	@refEl;

	if(parent==null || parent==undefined){
	
		refEl = Doc::body<children>[0];
		Doc::body<insertBefore>(element, refEl);
	
	}else{
	
		refEl = parent<children>[0];
		parent<insertBefore>(element, refEl);
		
	}
	
};

Proton<append> = $(element, parent){

	if(parent==null || parent==undefined)Doc::body<appendChild>(element);
	else parent<appendChild>(element);

};

Proton<remove> = $(element){

	element::parentNode::removeChild(element);

};

Proton<replace> = $(element, newelement){

	element::parentNode::replaceChild(newelement, element);

};

Proton<clone> = $(element, deep){

	@clone = element::cloneNode(deep!=null||deep!=undefined?deep:false);
	for(@property in element){
	
		try{
			
			if(property != "prefix"){
			
				clone[property] = element[property];
			
			}
			
		}catch(e){
		
			# console<log>(e.stack);
		
		}
	
	}
	
	return clone;

};

# Math (Just for buggy multiplication)

Proton<multiply> = $(num1, num2){

	return num1 / (1/num2);

};

# Other methods
Proton<localize> = $(object, host){

	for(@property in object){
	
		host[property] = object[property];
	
	}

}
