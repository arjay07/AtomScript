#    _____           _              
#   |  __ \         | |             
#   | |__) | __ ___ | |_ ___  _ __  
#   |  ___/ '__/ _ \| __/ _ \| '_ \ 
#   | |   | | | (_) | || (_) | | | |
#   |_|   |_|  \___/ \__\___/|_| |_| Animation v0.1
#                                   
#	Â©ZeroSeven Interactive 2015   
#	API for AtomScript
# 

Proton<Animation> = $(name, keyframes, duration, iteration){

	# Animation Properties
	this -> keyframes = keyframes;
	this -> name = name;
	this -> duration = duration;
	this -> iteration = iteration!=null||iteration!=undefined?iteration:"infinite";
	this -> timingFunction = "linear";
	this -> delay = "0s";
	this -> fillMode = "none";
	this -> playState = "paused";
	
	# Animation Methods
	this -> create = $(){
	
		@frames = *Proton<StringBuilder>();
		@frametemp = "percent{%frame}";
		@animation = "%evar -webkit-keyframes %name {%frames}";
		
		frames<append>("0%{" + keyframes[0] + "}");
		for(@i = 1; i < this::keyframes::length; i++){
		
			@keyframe = this::keyframes[i];
			@length = this::keyframes::length;
			@frac = Math<round>(i+1)/length;
			@perc = Math<floor>(Proton::multiply(frac, 100));
			
			frames<append>(frametemp::replace("%frame", keyframe)::replace("percent", perc + "%"));
		
		}
		
		@builtAnimation = animation::replace("%name", this->name)::replace("%frames", frames<toString>());
		
		@cssObj = Proton<CSS>();
		cssObj<insertRule>(builtAnimation, 0);
	
	};
	
	this -> apply = $(element){
	
		@styleTemp = "%name %duration %timeFunction %delay %iteration";
		@style = styleTemp::replace("%name", this->name)
						  ::replace("%duration", this->duration)
						  ::replace("%timeFunction", this->timingFunction)
						  ::replace("%delay", this->delay)
						  ::replace("%iteration", this->iteration)
						  
		Proton<style>(element, "webkitAnimation", style);
		Proton<style>(element, "webkitAnimationPlayState", this->playState);

	};
	
	this -> play = $(element){
	
		this -> playState = "running";
		this -> apply(element);
	
	};
	
	this -> pause = $(element){
	
		this -> playState = "paused";
		this -> apply(element);
	
	};

}

# Built-in Animations

# Fade Out
Proton::Animation<fadeOut> = *Proton<Animation>("Proton-fadeout", ["opacity: 1;", "opacity: 0;"], "1s", 1);
Proton::Animation::fadeOut<create>();

# Fade In
Proton::Animation<fadeIn> = *Proton<Animation>("Proton-fadein", ["opacity: 0;", "opacity: 1;"], "1s", 1);
Proton::Animation::fadeIn<create>();

# Flash
Proton::Animation<flash> = *Proton<Animation>("Proton-flash", ["opacity: 1;", "opacity: 0;", "opacity: 1;", "opacity: 0;", "opacity: 1;"], "1s", 1);
Proton::Animation::flash<create>();

# Pulse
Proton::Animation<pulse> = *Proton<Animation>("Proton-pulse", ["-webkit-transform: scale3d(1, 1, 1);", "-webkit-transform: scale3d(1.05, 1.05, 1.05);", "-webkit-transform: scale3d(1, 1, 1);"], "1s", 1);
Proton::Animation::pulse<create>();

# Rubber Band
Proton::Animation<rubberBand> = *Proton<Animation>("Proton-rubberBand", ["-webkit-transform: scale3d(1, 1, 1);", "-webkit-transform: scale3d(1.25, 0.75, 1);", "-webkit-transform: scale3d(0.75, 1.25, 1);", "-webkit-transform: scale3d(1.15, 0.85, 1);", "-webkit-transform: scale3d(.95, 1.05, 1);", "-webkit-transform: scale3d(1.05, .95, 1);", "-webkit-transform: scale3d(1, 1, 1);"], "1s", 1);
Proton::Animation::rubberBand<create>();

# Swing
Proton::Animation<swing> = *Proton<Animation>("Proton-swing", ["", " -webkit-transform: rotate3d(0, 0, 1, 15deg);", "-webkit-transform: rotate3d(0, 0, 1, -10deg);", "-webkit-transform: rotate3d(0, 0, 1, 5deg);", "-webkit-transform: rotate3d(0, 0, 1, -5deg);", "", "-webkit-transform: rotate3d(0, 0, 1, 0deg);"], "1s", 1);
Proton::Animation::swing<create>();

# Tada
Proton::Animation<tada> = *Proton<Animation>("Proton-tada", ["-webkit-transform: scale3d(1, 1, 1);", " -webkit-transform: scale3d(.9, .9, .9) rotate3d(0, 0, 1, -3deg);", "-webkit-transform: scale3d(.9, .9, .9) rotate3d(0, 0, 1, -3deg);", "-webkit-transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg);", "-webkit-transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg);", "-webkit-transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg);", "-webkit-transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg);", "-webkit-transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg);", "-webkit-transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg);", "-webkit-transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg);", "-webkit-transform: scale3d(1, 1, 1);"], "1s", 1);
Proton::Animation::tada<create>();

# Wobble
Proton::Animation<wobble> = *Proton<Animation>("Proton-wobble", ["-webkit-transform: none;", "-webkit-transform: translate3d(-25%, 0, 0) rotate3d(0, 0, 1, -5deg);", "-webkit-transform: translate3d(20%, 0, 0) rotate3d(0, 0, 1, 3deg);", "-webkit-transform: translate3d(-15%, 0, 0) rotate3d(0, 0, 1, -3deg);", "-webkit-transform: translate3d(10%, 0, 0) rotate3d(0, 0, 1, 2deg);", "-webkit-transform: translate3d(-5%, 0, 0) rotate3d(0, 0, 1, -1deg);", "-webkit-transform: none;"], "1s", 1);
Proton::Animation::wobble<create>();

# Bounce In
Proton::Animation<bounceIn> = *Proton<Animation>("Proton-bounceIn", ["opacity: 0; -webkit-transform: scale3d(.3, .3, .3);", "-webkit-transform: scale3d(1.1, 1.1, 1.1);", "-webkit-transform: scale3d(.9, .9, .9);", "opacity: 1;-webkit-transform: scale3d(1.03, 1.03, 1.03);", "-webkit-transform: scale3d(.97, .97, .97);", "opacity: 1;-webkit-transform: scale3d(1, 1, 1);"], "1s", 1);
Proton::Animation::bounceIn<create>();

# Bounce Out
Proton::Animation<bounceOut> = *Proton<Animation>("Proton-bounceOut", ["", "-webkit-transform: scale3d(.9, .9, .9);", "", "", "opacity: 1;-webkit-transform: scale3d(1.1, 1.1, 1.1);", "", "", "opacity: 0;-webkit-transform: scale3d(.3, .3, .3);"], "1s", 1);
Proton::Animation::bounceOut<create>();